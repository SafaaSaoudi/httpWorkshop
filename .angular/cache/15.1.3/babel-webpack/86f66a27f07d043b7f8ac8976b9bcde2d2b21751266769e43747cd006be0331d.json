{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductService {\n  constructor(http) {\n    this.http = http;\n  }\n  numberProducts(list, criteria, value) {\n    let ctr = 0;\n    for (let elt of list) {\n      if (elt[criteria] == value) {\n        ctr++;\n      }\n    }\n    return ctr;\n  }\n  getAllProducts() {\n    this.http.get(\"URL\").subscribe(data => alert(data));\n  }\n}\nProductService.ɵfac = function ProductService_Factory(t) {\n  return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient));\n};\nProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ProductService,\n  factory: ProductService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":";;AAOA,OAAM,MAAOA,cAAc;EAIzBC,YAAoBC,IAAe;IAAf,SAAI,GAAJA,IAAI;EAAe;EAEvCC,cAAc,CAACC,IAAQ,EAAEC,QAAe,EAAEC,KAAY;IACpD,IAAIC,GAAG,GAAC,CAAC;IACT,KAAI,IAAIC,GAAG,IAAIJ,IAAI,EAAC;MAClB,IAAGI,GAAG,CAACH,QAAQ,CAAC,IAAIC,KAAK,EAAC;QACxBC,GAAG,EAAE;;;IAIT,OAAOA,GAAG;EACZ;EAGAE,cAAc;IACZ,IAAI,CAACP,IAAI,CAACQ,GAAG,CAAC,KAAK,CAAC,CAACC,SAAS,CAACC,IAAI,IAAIC,KAAK,CAACD,IAAI,CAAC,CAAC;EACrD;;AApBWZ,cAAc;mBAAdA,cAAc;AAAA;AAAdA,cAAc;SAAdA,cAAc;EAAAc,SAAdd,cAAc;EAAAe,YAFb;AAAM","names":["ProductService","constructor","http","numberProducts","list","criteria","value","ctr","elt","getAllProducts","get","subscribe","data","alert","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\safas\\Downloads\\AngularWorkshop-master\\AngularWorkshop-master\\src\\app\\services\\product.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Product } from '../Models/Product';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductService {\n\n  \n\n  constructor(private http:HttpClient) { }\n\n  numberProducts(list:any, criteria:string, value:number){\n    let ctr=0;\n    for(let elt of list){\n      if(elt[criteria] == value){\n        ctr++;\n      }\n\n    }\n    return ctr;\n  }\n\n\n  getAllProducts(){\n    this.http.get(\"URL\").subscribe(data => alert(data));\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}